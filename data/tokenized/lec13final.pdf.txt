CPSC 420 Lecture 13: Today’s announcements:
▶ HW2 is on Gradescope, due Feb 9, 23:59
▶ Examlet 2 on Feb 17 in class. Closed book & no notes
▶ Reading: Ch.H Linear Programming, Ch.3 Dynamic
Programming [all by Erickson]
Today’s Plan
▶ Linear programming duality
▶ Dynamic programming
▶ Longest Increasing Subsequence
▶ Edit Distance
1 / 8

Longest Increasing Subsequence
What is a longest increasing subsequence of:
5
3
4
9
6
2
1
8
A sequence S[1..k] is increasing if S[i] < S[i + 1] ∀i = 1..k − 1.
Given: A sequence of numbers R[1..n]. Find: LIS of R
Use LCS to solve LIS
LIS(R)
1. S =
2. output LCS(S, R)
Running time?
2 / 8

Recursive Longest Increasing Subsequence
Idea: Either take R[n] or don’t.
LimitedLIS(R, x)
# Find LIS with last number less than x.
1. if |R| = 0 return []
2. T = []
4.3. if R[n] < x then
T = LimitedLIS(R[1..n − 1], R[n]) ◦ R[n]
5. return max{T, LimitedLIS(R[1..n − 1], x)}
Running time?
3 / 8

Faster Longest Increasing Subsequence
To find LIS(R[1..k]), what information about R[1..k − 1] is
enough?
A. LIS of R[1..k − 1]
5 3 4 9 6 2 1 8
3 4 9↑
or
3 4 6?
4 / 8

Faster Longest Increasing Subsequence
To find LIS(R[1..k]), what information about R[1..k − 1] is
enough?
A. LIS of R[1..k − 1]
5 3 4 9 6 2 1 8
3 4 9↑
or
3 4 6?
B. Best LIS of R[1..k − 1]
1 2 5 3 4
↑
want shorter IS as well
4 / 8

Faster Longest Increasing Subsequence
To find LIS(R[1..k]), what information about R[1..k − 1] is
enough?
A. LIS of R[1..k − 1]
5 3 4 9 6 2 1 8
3 4 9↑
or
3 4 6?
B. Best LIS of R[1..k − 1]
1 2 5 3 4
↑
want shorter IS as well
C. Best ISs of length 1, 2, . . . , j, where j = |LIS(R[1..k − 1])|
4 / 8

Faster Longest Increasing Subsequence
To find LIS(R[1..k]), what information about R[1..k − 1] is
enough?
A. LIS of R[1..k − 1]
5 3 4 9 6 2 1 8
3 4 9↑
or
3 4 6?
B. Best LIS of R[1..k − 1]
1 2 5 3 4
↑
want shorter IS as well
C. Best ISs of length 1, 2, . . . , j, where j = |LIS(R[1..k − 1])|
Now we need to find best ISs for R[1..k] using this info. How?
4 / 8

Recursive Best Increasing Subsequences
8
3
4
9
6
2
1
5
7
2
BIS9[1] = 1
BIS9[2] = 3 4
BIS9[3] = 3 4 5
BIS9[4] = 3 4 5 7
R[k] extends BIS[j] iﬀ BIS[j].last < R[k] and
(j = |BIS| or BIS[j + 1].last > R[k])
Claim: BIS[1].last < BIS[2].last < · · ·
Proof: If BIS[i].last ≥ BIS[i + 1].last then the first i numbers in
BIS[i + 1] would be a better BIS[i] ⇒⇐.
5 / 8

Recursive Best Increasing Subsequences
8
3
4
9
6
2
1
5
7
2
BIS9[1] = 1
BIS9[2] = 3 4
BIS9[3] = 3 4 5
BIS9[4] = 3 4 5 7
R[k] extends BIS[j] iﬀ BIS[j].last < R[k] and
(j = |BIS| or BIS[j + 1].last > R[k])
BIS(R)
1. if |R| = 0 return []
2. if |R| = 1 return [R[1]]
3. B = BIS(R[1..n − 1])
5.4. for j = 1 to |B| − 1
if R[n] extends B[j] then
B[j + 1] = B[j] ◦ R[n]; return B
6. return B
5 / 8

Best Increasing Subsequences Dynamic Programming
8
3
4
9
6
2
1
5
7
2
BIS9[1] = 1
BIS9[2] = 3 4
BIS9[3] = 3 4 5
BIS9[4] = 3 4 5 7
BIS7[1] = 1
BIS7[2] = 3 4
BIS7[3] = 3 4 6
BIS8[1] = 1
BIS8[2] = 3 4
BIS8[3] = 3 4 5
R[k] extends BIS[j] iff BIS[j].last < R[k] and
(j = |BIS| or BIS[j + 1].last > R[k])
6 / 8

Best Increasing Subsequences Dynamic Programming
8
3
4
9
6
2
1
5
7
2
R[k] extends BIS[j] iff BIS[j].last < R[k] and
(j = |BIS| or BIS[j + 1].last > R[k])
Maintain lists L[0], L[1], .. where L0[0] = [0]. After we scan R[1..k]
Lk[j] =
�
Lk−1[j] ◦ R[k]
if R[k] extends BISk−1[j]
Lk−1[j]
otherwise
L[0] =
0
L[1] =
L[2] =
L[3] =
L[4] =
As a result list Lk[i] ends with BISk[j].last at step k.
7 / 8

Best Increasing Subsequences Dynamic Programming
8
3
4
9
6
2
1
5
7
2
R[k] extends BIS[j] iff BIS[j].last < R[k] and
(j = |BIS| or BIS[j + 1].last > R[k])
Maintain lists L[0], L[1], .. where L0[0] = [0]. After we scan R[1..k]
Lk[j] =
�
Lk−1[j] ◦ R[k]
if R[k] extends BISk−1[j]
Lk−1[j]
otherwise
L[0] =
0
L[1] =
8
3
2
1
L[2] =
4
L[3] =
9
6
5
L[4] =
7
6
use binary search to ﬁnd j
Running time?
a
b
means b extended
BIS ending with a
As a result list Lk[i] ends with BISk[j].last at step k.
7 / 8

Use LIS to solve LCS [Hunt & Szymanski 1977]
A
B
C
B
A
C
C
B
B
x
x
x
C
x
x
x
AD
x
x
B
x
x
x
C
x
x
x
C
x
x
x
8 / 8

Use LIS to solve LCS [Hunt & Szymanski 1977]
A
B
C
B
A
C
C
B
B
x○
x
x
C
x○
x
x
AD
x
x
B
x
x○
x
C
x
x○
x
C
x
x
x○
1 , 2
2 , 3
5 , 4
6 , 6
7 , 7
Longest Common Subsequence = BCBCC
What properties do the circled entries have?
8 / 8

Use LIS to solve LCS [Hunt & Szymanski 1977]
A
B
C
B
A
C
C
B
B
x○
x
x
C
x○
x
x
AD
x
x
B
x
x○
x
C
x
x○
x
C
x
x
x○
1 , 2
2 , 3
5 , 4
6 , 6
7 , 7
Longest Common Subsequence = BCBCC
What properties do the circled entries have?
They form a sequence of index pairs of matches that increases in
both dimensions.
8 / 8