CPSC 420 Lecture 9 : Today’s announcements:
▶ HW2 available tonight on Gradescope, due Feb 9, 23:59
▶ Examlet 2 on Feb 17 in class. Closed book & no notes
▶ Reading: Maximum Flows & Minimum Cuts [Algorithms by
Erickson Ch. 10]
Today’s Plan
▶ Network Flow
▶ Ford-Fulkerson algorithm
▶ Edmonds-Karp algorithm
▶ Maximum matching in bipartite graphs
1 / 7

Max Flow via Path Augmentation [Ford & Fulkerson 1962]
1. Start with zero flow (a feasible solution)
2. Repeat until impossible
▶ Choose an augmenting path from s to t
▶ Increase flow on this path as much as
possible
s
a
b
t
1
1
1
1
1
s
a
b
t
The residual network of flow network G = (V , E) with flow f is
G f = (V , E f ) where
E f = {(u, v)|f (u, v) < c(u, v) or f (v, u) > 0}
The residual capacity of an edge (u, v) ∈ E f is
cf (u, v) =
�
c(u, v) − f (u, v)
if f (u, v) < c(u, v)
f (v, u)
if f (v, u) > 0
An augmenting path in G is an s ⇝ t path in G f
2 / 7

Running time of Ford & Fulkerson
For flow networks (V , E) with integral capacities:
Running time O(|E|size(f ∗))
For flow networks (V , E) with irrational capacities:
Running time ∞
Edmonds-Karp
Shortest augmenting path:
Running time O(|V ||E|2)
regardless of capacities
Beyond Ford-Fulkerson
[Orlin 2012]
Use this as NF runtime →
O(|V ||E|)
[Chen-Kyng-Liu-Peng-Gutenberg-Sachdeva 2022]
O(|E|1+o(1))
3 / 7

Shortest augmenting path [Edmonds & Karp]
Lemma: The length d1(s, v) (# edges) of the shortest path in
residual network G1 from s to v cannot decrease in residual
network G2 after a shortest aug. path augmentation.
Proof: Suppose d1(s, v) does decrease to d2(s, v) < d1(s, v). Pick
such a v with smallest d2(s, v). Let u be the vertex before v in
this shortest aug. path in G2 (v ̸= s so u exists).
d2(s, v) = d2(s, u) + 1
≥ d1(s, u) + 1
u is closer to s
≥ d1(s, v)
see (1) and (2) ⇒⇐ □
(1) If (u, v) ∈ G1 then d1(s, v) ≤ d1(s, u) + 1
(2) If (u, v) ̸∈ G1 then augmentation created (u, v) in G2
G1
s
v
u
t This is a shortest aug. path so
d1(s, u) = d1(s, v) + 1 and d1(s, u) > d1(s, v)
4 / 7

Shortest augmenting path [Edmonds & Karp]
A critical edge on an aug. path is edge with smallest residual
capacity on path.
Ga
s
u
v
t
⇓
shortest aug.path
(u, v) critical
augment
s
u
v
t
⇓...⇓
(u, v) ̸∈ res. network
(u, v) can’t be in aug. path until
ﬂow is pushed back from v to u
s
u
v
t
s
u
v
t
shortest aug.path
Gb
⇓ augment
da(s, v) = da(s, u) + 1
shortest path prefix is shortest
db(s, u) = db(s, v) + 1
≥ da(s, v) + 1
Lemma
= da(s, u) + 2
5 / 7

Shortest augmenting path [Edmonds & Karp]
A critical edge on an aug. path is edge with smallest residual
capacity on path.
da(s, v) = da(s, u) + 1
shortest path prefix is shortest
db(s, u) = db(s, v) + 1
≥ da(s, v) + 1
Lemma
= da(s, u) + 2
From the time (u, v) was critical to the time when (u, v) could next
be critical, the shortest path from s to u increases by at least 2
⇒ # times (u, v) can be critical ≤ |V |−1
2
⇒ # augmentations ≤ |V |−1
2
· |E| ∈ O(|V | · |E|)
Since finding a shortest augmenting path (using BFS) takes time
O(|E|), total runtime is O(|V ||E|2).
5 / 7

Maximum Matching in Bipartite Graphs
A matching in a graph G is a subset M of its
edges with no vertex the endpoint of more than
one edge in M.
A maximum matching is a matching with the
maximum number of edges.
A maximal matching is a matching to which
another edge cannot be added to form a new
matching.
matching edge
A bipartite graph is a graph G = (V , E) where
V can be partitioned into A and B such that
∀(u, v) ∈ E, either u ∈ A and v ∈ B or u ∈ B
and v ∈ A.
6 / 7

Maximum Matching in Bipartite Graphs
A matching in a graph G is a subset M of its
edges with no vertex the endpoint of more than
one edge in M.
A maximum matching is a matching with the
maximum number of edges.
A maximal matching is a matching to which
another edge cannot be added to form a new
matching.
matching edge
A bipartite graph is a graph G = (V , E) where
V can be partitioned into A and B such that
∀(u, v) ∈ E, either u ∈ A and v ∈ B or u ∈ B
and v ∈ A.
B
A
Given bipartite graph G = (V , E) with partitions A and B
find maximum matching in G.
6 / 7

Maximum Matching in Bipartite Graphs Algorithm
Given bipartite graph G = (V , E) with partitions A and B:
1. Create a flow network F = (V ′, E ′)
V ′ =V ∪ {s, t}
add source and sink
E ′ ={(u, v)|u ∈ A, v ∈ B, (u, v) ∈ E}
edges from A to B
∪ {(s, u)|u ∈ A}
edges from s to A
∪ {(v, t)|v ∈ B}
edges from B to t
Set all capacities to 1.
2. Find maximum flow f in F
3. Output edges (u, v) ∈ E such that f (u, v) = 1
7 / 7