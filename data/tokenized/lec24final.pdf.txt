CPSC 420 Lecture 24: Today’s announcements:
▶ Examlet 3 on Mar 17 in class. Closed book & no notes
▶ Reading: Randomized Algorithms [by Motwani and Raghavan]
Today’s Plan
▶ Online Algorithms
▶ Hiring problem ✓
▶ Page replacement
▶ List Update
▶ Experts
1 / 8

Any Marking Algorithm is k-competitive
Marking Algorithm MARK
0. Start with all k pages in cache unmarked
2.1. On page request p
if p not in cache then
3.
evict any unmarked page
(if no unmarked page, first unmark all k pages)
5.
bring p into cache
6.
mark p
A
B
C
D
B
A
B
C
D
A
B
MARK
•A
•A
•A
•D
•D
•D
•D
•C
•C
•C
•B
Y
•B
•B
B
•B
•B
•B
B
•D
•D
D
Z
Z
•C
C
C
•A
•A
A
A
•A
A
*
*
*
*
*
*
*
*
FIFO
A
B
C
D
D
A
B
C
D
A
B
Y
A
B
C
C
D
A
B
C
D
A
Z
Y
A
B
B
C
D
A
B
C
D
*
*
*
*
*
*
*
*
*
*
2 / 8

Any Marking Algorithm is k-competitive
Marking Algorithm MARK
0. Start with all k pages in cache unmarked
2.1. On page request p
if p not in cache then
3.
evict any unmarked page
(if no unmarked page, first unmark all k pages)
5.
bring p into cache
6.
mark p
Proof.
Partition p1, p2, . . . , pn into phases, a maximal subsequence with k
distinct pages. (The first starts with p1.) Assume p1 is not in
cache. MARK faults ≤ k times per phase.
OPT must have the first page pi of a phase in cache at the
beginning of a phase. Since the remainder of the phase plus the
first page of the next phase consists of k different pages (different
from pi), OPT must fault at least once during these requests.
⇒ OPT faults ≥ #phases − 1 times.
3 / 8

Randomized online algorithm
Online Hide and Seek
Mouse hides in one of m hiding spots.
Cat looks in one spot each time step.
If Cat finds Mouse, Mouse runs to another spot.
Cost = #times Mouse moves
OPT = min #times future-knowing Mouse must move
1
2
3
4
4 / 8

Randomized online algorithm
Online Hide and Seek
Mouse hides in one of m hiding spots.
Cat looks in one spot each time step.
If Cat finds Mouse, Mouse runs to another spot.
Cost = #times Mouse moves
OPT = min #times future-knowing Mouse must move
1
2
3
4
OPT(1 2 3 4 1 2 3 4) = 2
4 / 8

Randomized online algorithm
Online Hide and Seek
Mouse hides in one of m hiding spots.
Cat looks in one spot each time step.
If Cat finds Mouse, Mouse runs to another spot.
Cost = #times Mouse moves
OPT = min #times future-knowing Mouse must move
1
2
3
4
OPT(1 2 3 4 1 2 3 4) = 2
4 / 8

Randomized online algorithm
Online Hide and Seek
Mouse hides in one of m hiding spots.
Cat looks in one spot each time step.
If Cat finds Mouse, Mouse runs to another spot.
Cost = #times Mouse moves
OPT = min #times future-knowing Mouse must move
1
2
3
4
OPT(1 2 3 4 1 2 3 4) = 2
4 / 8

Randomized online algorithm
Online Hide and Seek
Mouse hides in one of m hiding spots.
Cat looks in one spot each time step.
If Cat finds Mouse, Mouse runs to another spot.
Cost = #times Mouse moves
OPT = min #times future-knowing Mouse must move
1
2
3
4
OPT(1 2 3 4 1 2 3 4) = 2
4 / 8

Randomized online algorithm
Online Hide and Seek
Mouse hides in one of m hiding spots.
Cat looks in one spot each time step.
If Cat finds Mouse, Mouse runs to another spot.
Cost = #times Mouse moves
OPT = min #times future-knowing Mouse must move
1
2
3
4
OPT(1 2 3 4 1 2 3 4) = 2
OPT(1 2 3 4 1 2 3 4) = 2
4 / 8

Randomized online algorithm
Online Hide and Seek
Mouse hides in one of m hiding spots.
Cat looks in one spot each time step.
If Cat finds Mouse, Mouse runs to another spot.
Cost = #times Mouse moves
OPT = min #times future-knowing Mouse must move
1
2
3
4
OPT(1 2 3 4 1 2 3 4) = 2
OPT(1 2 1 1 3 4 1 2) = 1
4 / 8

Randomized Marking Mouse
If Mouse follows a deterministic strategy, there is a sequence S of
Cat probes that causes
MouseCost(S) ≥ (m − 1)OPT(S)
Paging
m − 1 = cache size
m = different pages
Mouse = page not in cache
Cat probes = page requests
Must move = page fault
Randomized Marking Mouse (RMM)
• Start at random spot
• If Cat probes a spot, mark it
• If Cat probes Mouse’s spot,
Mouse moves to random unmarked spot
• If Mouse is at last unmarked spot, clear marks [phase ends]
5 / 8

Randomized Marking Mouse performance
Claim: E[RMMCost(S)] ≤ O(log m)OPT(S)
Proof: Initially, RMM is equally likely to be at any of the m spots.
1st probe finds Mouse with probability 1/m.
Whether Mouse is found or not, Mouse is at each of the m−1
unmarked spots with prob. 1/(m − 1).
2nd probe (to unmarked spot) finds Mouse with prob 1/(m − 1).
Mouse is at each of the m − 2 unmarked spots with prob.
1/(m − 2). Etc.
Let Xi =
�
1
if Mouse found on ith probe to unmarked spot
0
otherwise
E[#times found per phase] = E[X1 + X2 + · · · + Xm]
≤ 1
m +
1
m − 1 + · · · + 1
1 = O(log m)
OPT moves once per phase.
6 / 8

Is Totally Random Mouse (TRM) better?
TRM runs to a random spot if found.
Consider the Methodical Cat (MC):
• Probe spots 1, 2, 3, ... until Mouse found
• Repeat
What does the OPT mouse do?
7 / 8

Is Totally Random Mouse (TRM) better?
TRM runs to a random spot if found.
Consider the Methodical Cat (MC):
• Probe spots 1, 2, 3, ... until Mouse found
• Repeat
What does the OPT mouse do? Hide in spot m
E[#times RM found before MC probes m] =
E[#rolls of m-sided dice before m] = m
⇒ RM is m-competitive.
7 / 8

Random Marking Mouse is best
Claim: Any Mouse A has E[A(S)] ∈ Ω(log m)OPT(S)
Proof:
Idea: Show that a Cat exists that will cause E[A(S)] ∈ Ω(log m)
regardless of the Mouse.
Random Cat (RC) probes a random spot with each probe. RC
finds Mouse with prob.
1
m no matter what Mouse does.
⇒ E[A(S)] after t probes is
t
m.
How many RC probes until RC examines every spot?
Coupon Collector Problem ⇒ Θ(m log m)
So OPT Mouse (that knows RC’s probes) moves once in sequence
S of Ω(m log m) probes, while Mouse A moves
E[A(S)] ∈ Ω(m log m)
m
= Ω(log m) times.
8 / 8