CPSC 420 Lecture 18: Today’s announcements:
▶ HW3 is on Gradescope, due Mar 9, 23:59
▶ Examlet 3 on Mar 17 in class. Closed book & no notes
▶ Reading:
NP-hardness [by Erickson]
Today’s Plan
▶ NP-hardness
1 / 13

NP-hard, NP-complete
NP-hard: Problems A where if A can be solved in polynomial time
then P = NP.
NP-complete: Decision problems A where A ∈ NP-hard and
A ∈ NP.
P
co-NP
NP
NP-hard
NP-complete
Our current guess of P, NP, co-NP, NP-hard, NP-complete
2 / 13

Cook-Levin Theorem
Theorem
Circuit satisfiability is NP-hard
Proof.
You don’t need to know the proof but the idea is: Show how to
encode the execution of any polynomial-time, non-deterministic
Turing machine M on an input x as some boolean circuit that is
satisfiable if and only if M outputs “Yes” on input x.
How do we show other problems are NP-hard?
3 / 13

Cook-Levin Theorem
Theorem
Circuit satisfiability is NP-hard
Proof.
You don’t need to know the proof but the idea is: Show how to
encode the execution of any polynomial-time, non-deterministic
Turing machine M on an input x as some boolean circuit that is
satisfiable if and only if M outputs “Yes” on input x.
How do we show other problems are NP-hard?
To prove problem A is NP-hard, show how to reduce
(in polynomial time) an NP-hard problem to A.
Reduce Circuit Satisfiability to A means “Solve Circuit
Satisfiability using an algorithm for A.”
3 / 13

3SAT is NP-hard
3SAT: Is a given boolean formula, which is the AND of several
three-literal OR-clauses, satisfiable?
Example: Is (a ∨ b ∨ c) ∧ (a ∨ b ∨ c) ∧ (a ∨ c ∨ d) satisfiable?
Reduction: From CircuitSat to 3SAT
Fast
input
transform
3CNF
formula
3SAT
algorithm
Circuit
K
Φ
T/F
CircuitSat algorithm
4 / 13

Transform Circuit into 3CNF formula
Input to CircuitSAT = Boolean Circuit
x1
x2
x3
x4
AND
NOT
OR
OR
AND
AND
5 / 13

Transform Circuit into 3CNF formula
Input to CircuitSAT = Boolean Circuit
x1
x2
x3
x4
AND
NOT
OR
OR
AND
AND
x1
AND
NOT
OR
OR
AND
AND
OR
x3
x4
x2
y1
y2
y3
y4
y5
y6
y7
Equivalent circuit where AND and OR gates have two inputs.
5 / 13

Transform Circuit into 3CNF formula
x1
AND
NOT
OR
OR
AND
AND
OR
x3
x4
x2
y1
y2
y3
y4
y5
y6
y7
(x1 ∨ x2 ∨ y1) ∧ (x1 ∨ y1) ∧ (x2 ∨ y1) ∧ (x2 ∨ y2) ∧ (x2 ∨ y2) ∧ (x3 ∨ x2 ∨
y3) ∧ (x3 ∨ y3) ∧ (x2 ∨ y3) ∧ (y3 ∨ x4 ∨ y4) ∧ (y3 ∨ y4) ∧ (x4 ∨ y4) ∧
(y1 ∨ y2 ∨ y5) ∧ (y1 ∨ y5) ∧ (y2 ∨ y5) ∧ (y2 ∨ y4 ∨ y6) ∧ (y2 ∨ y6) ∧ (y4 ∨
y6) ∧ (y5 ∨ y6 ∨ y7) ∧ (y5 ∨ y7) ∧ (y6 ∨ y7) ∧ (y7)
x1
AND
NOT
OR
OR
AND
AND
OR
x3
x4
x2
y1
y2
y3
y4
y5
y6
y7
AND
a
b
c
OR
ba
c
NOT
a
b
�−→ (a ∨ b ∨ c) ∧ (a ∨ c) ∧ (b ∨ c)
�−→ (a ∨ b ∨ c) ∧ (a ∨ c) ∧ (b ∨ c)
�−→ (a ∨ b) ∧ (a ∨ b)
CNF formula satisfied iff circuit is satisfied.
6 / 13

Transform Circuit into 3CNF formula
x1
AND
NOT
OR
OR
AND
AND
OR
x3
x4
x2
y1
y2
y3
y4
y5
y6
y7
(x1 ∨x2 ∨y1)∧(x1 ∨y1 ∨z1)∧(x1 ∨y1 ∨z1)∧(x2 ∨y1 ∨z2)∧(x2 ∨y1 ∨
z2)∧(x2∨y2∨z3)∧(x2∨y2∨z3)(x2∨y2∨z4)∧(x2∨y2∨z4)∧(x3∨x2∨
y3)∧(x3∨y3∨z5)∧(x3∨y3∨z5)∧(x2∨y3∨z6)∧(x2∨y3∨z6)∧(y3∨x4∨
y4)∧(y3∨y4∨z7)∧(y3∨y4∨z7)∧(x4∨y4∨z8)∧(x4∨y4∨z8)∧(y1∨y2∨
y5)∧(y1∨y5∨z9)∧(y1∨y5∨z9)∧(y2∨y5∨z10)∧(y2∨y5∨z10)∧(y2∨
y4∨y6)∧(y2∨y6∨z11)∧(y2∨y6∨z11)∧(y4∨y6∨z12)∧(y4∨y6∨z12)∧
(y5∨y6∨y7)∧(y5∨y7∨z13)∧(y5∨y7∨z13)∧(y6∨y7∨z14)∧(y6∨y7∨
z14)∧(y7 ∨z15 ∨z16)∧(y7 ∨z15 ∨z16)∧(y7 ∨z15 ∨z16)∧(y7 ∨z15 ∨z16)
a ∨ b �−→ (a ∨ b ∨ z) ∧ (a ∨ b ∨ z)
a �−→ (a ∨ w ∨ z) ∧ (a ∨ w ∨ z) ∧ (a ∨ w ∨ z) ∧ (a ∨ w ∨ z))
x1
AND
NOT
OR
OR
AND
AND
OR
x3
x4
x2
y1
y2
y3
y4
y5
y6
y7
3CNF formula satisfied iff circuit is satisfied.
6 / 13

Proof: Φ is satisfiable iff K is satisfiable
1. Replace AND gates that have k > 2 inputs with a logically
equivalent binary tree of k − 1 AND gates. Same for OR.
AND
AND
AND
AND
AND
bca
de
a
b
c
d
e
�−→
2. Add new variables yi to each gate output.
3. Use
AND
a
b
c
OR
ba
c
NOT
a
b
�−→ (a ∨ b ∨ c) ∧ (a ∨ c) ∧ (b ∨ c)
�−→ (a ∨ b ∨ c) ∧ (a ∨ c) ∧ (b ∨ c)
�−→ (a ∨ b) ∧ (a ∨ b)
to ensure yi = gate output for each AND, OR, NOT gate.
7 / 13

Proof: Φ is satisfiable iff K is satisfiable
4. Use
a ∨ b �−→ (a ∨ b ∨ z) ∧ (a ∨ b ∨ z)
a �−→ (a ∨ w ∨ z) ∧ (a ∨ w ∨ z) ∧ (a ∨ w ∨ z) ∧ (a ∨ w ∨ z))
to convert two- or one-literal clauses into three-literal clauses.
Claim: Circuit K is satisfiable if and only if the resulting formula Φ
is satisfiable.
Proof: K ′ with 2-input gates is logically equivalent to K
⇒ If an input x1, . . . , xn satisfies circuit K ′, let yj be the output of
jth gate in K ′ on this input and let zk be 0 or 1 for all k (it
doesn’t matter). This assignment satisfies Φ.
⇐ If Φ has a satisfying assignment to its variables (xis, yjs, and
zks), the assignment to x1, . . . , xn satisfies circuit K.
8 / 13

3SAT is NP-complete
The previous reduction (from CircuitSat) proves that 3SAT is
NP-hard.
To show 3SAT is NP-complete we need to show 3SAT is in NP.
9 / 13

3SAT is NP-complete
The previous reduction (from CircuitSat) proves that 3SAT is
NP-hard.
To show 3SAT is NP-complete we need to show 3SAT is in NP.
A truth-assignment to the variables of a 3SAT formula that
satisfies the formula (a proof of a “Yes” instance) can be checked
in linear time by checking that each clause evaluates to True.
9 / 13

3SAT is NP-complete
The previous reduction (from CircuitSat) proves that 3SAT is
NP-hard.
To show 3SAT is NP-complete we need to show 3SAT is in NP.
A truth-assignment to the variables of a 3SAT formula that
satisfies the formula (a proof of a “Yes” instance) can be checked
in linear time by checking that each clause evaluates to True.
Is SAT (clauses can have any number of literals) NP-complete?
9 / 13

Independent Set
An independent set is a set of vertices in a graph G that share no
common edge.
A
B
C
D
E
IndependentSet takes graph G and integer k and outputs “Yes”
if G has an independent set of size k and “No” otherwise.
Claim: IndependentSet is NP-hard.
10 / 13

Reduce from SAT to IndependentSet
Fast
input
transform
Graph
and size
IndSet
algorithm
Φ
G, k
T/F
SAT algorithm
CNF
formula
Transform a 3CNF formula Φ into a graph G and integer k so that
Φ is satisfied if and only if G has an independent set of size k.
11 / 13

Reduce from SAT to IndependentSet
Fast
input
transform
Graph
and size
IndSet
algorithm
Φ
G, k
T/F
SAT algorithm
CNF
formula
Transform a 3CNF formula Φ into a graph G and integer k so that
Φ is satisfied if and only if G has an independent set of size k.
Φ = (a) ∧ (a ∨ b) ∧ (a ∨ c) ∧ (b ∨ c ∨ d)
a
a
b
a
c
b
c
d
11 / 13

Reduce from SAT to IndependentSet
Φ = (a) ∧ (a ∨ b) ∧ (a ∨ c) ∧ (b ∨ c ∨ d)
a
a
b
a
c
b
c
d
G =
k = 4
1. Create a vertex for every occurrence of a literal in a clause.
2. Create edges between every literal occurrence and its negation.
3. For each clause, create edges between all literals in the clause.
4. Let the size of the desired independent set k = # clauses
12 / 13

Reduce from SAT to IndependentSet
Φ = (a) ∧ (a ∨ b) ∧ (a ∨ c) ∧ (b ∨ c ∨ d)
a
a
b
a
c
b
c
d
G =
k = 4
Claim: G contains an independent set of size k if and only if Φ is
satisfiable.
⇒ Let S be an independent set of size k in G. S cannot contain
two literal nodes from the same clause, so every one of the k
clauses contains one literal in S. S cannot contain a literal node
and its negation. Set all literals in S to true. This satisfies Φ.
⇐ Let A be a truth assignment satisfying Φ. Every clause contains
at least one True literal. Pick one for each of the k clauses and let
S be the set of corresponding vertices. Since A doesn’t assign True
to a literal and its negation, S is an independent set of size k.
13 / 13